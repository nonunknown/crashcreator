[gd_scene load_steps=22 format=2]

[ext_resource path="res://models/items/crate/Image_1.png" type="Texture" id=1]
[ext_resource path="res://textures/gameplay/boxes-particles.png" type="Texture" id=2]
[ext_resource path="res://models/items/crate/Image_0.png" type="Texture" id=3]
[ext_resource path="res://sounds/crate/checkpoint.ogg" type="AudioStream" id=4]
[ext_resource path="res://scripts/gameplay/Crate_Checkpoint.gd" type="Script" id=5]
[ext_resource path="res://textures/gameplay/materials/mat_simple.material" type="Material" id=6]
[ext_resource path="res://textures/gameplay/materials/mat_checkpoint.material" type="Material" id=7]
[ext_resource path="res://resources/gameplay/crate_collide_area.res" type="PackedScene" id=8]

[sub_resource type="Shader" id=1]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_mapping(vec3 vec, mat4 mat, vec3 minvec, vec3 maxvec, float domin,
        float domax, out vec3 outvec) {
    outvec = (mat * vec4(vec, 1.0)).xyz;
    if (domin == 1.0) {
        outvec = max(outvec, minvec);
    }
    if (domax == 1.0) {
        outvec = min(outvec, maxvec);
    }
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'UV Map'
	// type: 'ShaderNodeUVMap'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_uv;
	
	node0_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_uv;
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	node_mapping(node1_in0_vector, mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0,
		0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), vec3(0.0, 0.0,
		0.0), vec3(1.0, 1.0, 1.0), 0.0, 0.0, node1_out0_vector);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node3_in0_basecolor = node2_out0_color;
	float node3_in1_subsurface = float(0.0);
	vec3 node3_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node3_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node3_in4_metallic = float(0.0);
	float node3_in5_specular = float(0.5);
	float node3_in6_speculartint = float(0.0);
	float node3_in7_roughness = float(0.4000000059604645);
	float node3_in8_anisotropic = float(0.0);
	float node3_in9_anisotropicrotation = float(0.0);
	float node3_in10_sheen = float(0.0);
	float node3_in11_sheentint = float(0.5);
	float node3_in12_clearcoat = float(0.0);
	float node3_in13_clearcoatroughness = float(0.029999999329447746);
	float node3_in14_ior = float(1.4500000476837158);
	float node3_in15_transmission = float(0.0);
	float node3_in16_transmissionroughness = float(0.0);
	vec4 node3_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node3_in18_alpha = float(1.0);
	vec3 node3_in19_normal = NORMAL;
	vec3 node3_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node3_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node3_bsdf_out0_albedo;
	float node3_bsdf_out1_sss_strength;
	float node3_bsdf_out3_specular;
	float node3_bsdf_out2_metallic;
	float node3_bsdf_out4_roughness;
	float node3_bsdf_out5_clearcoat;
	float node3_bsdf_out6_clearcoat_gloss;
	float node3_bsdf_out7_anisotropy;
	float node3_bsdf_out8_transmission;
	float node3_bsdf_out9_ior;
	
	node_bsdf_principled(node3_in0_basecolor, node3_in1_subsurface,
		node3_in3_subsurfacecolor, node3_in4_metallic, node3_in5_specular,
		node3_in7_roughness, node3_in12_clearcoat, node3_in13_clearcoatroughness,
		node3_in8_anisotropic, node3_in15_transmission, node3_in14_ior,
		node3_bsdf_out0_albedo, node3_bsdf_out1_sss_strength, node3_bsdf_out2_metallic,
		node3_bsdf_out3_specular, node3_bsdf_out4_roughness, node3_bsdf_out5_clearcoat,
		node3_bsdf_out6_clearcoat_gloss, node3_bsdf_out7_anisotropy,
		node3_bsdf_out8_transmission, node3_bsdf_out9_ior);
	
	
	ALBEDO = node3_bsdf_out0_albedo;
	SSS_STRENGTH = node3_bsdf_out1_sss_strength;
	SPECULAR = node3_bsdf_out3_specular;
	METALLIC = node3_bsdf_out2_metallic;
	ROUGHNESS = node3_bsdf_out4_roughness;
	CLEARCOAT = node3_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node3_bsdf_out6_clearcoat_gloss;
	NORMAL = node3_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node3_bsdf_out8_transmission;
	TANGENT = normalize(cross(cross(node3_in21_tangent, NORMAL), NORMAL));
	BINORMAL = cross(TANGENT, NORMAL);
	ANISOTROPY = node3_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/texture_0 = ExtResource( 3 )

[sub_resource type="Shader" id=3]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_mapping(vec3 vec, mat4 mat, vec3 minvec, vec3 maxvec, float domin,
        float domax, out vec3 outvec) {
    outvec = (mat * vec4(vec, 1.0)).xyz;
    if (domin == 1.0) {
        outvec = max(outvec, minvec);
    }
    if (domax == 1.0) {
        outvec = min(outvec, maxvec);
    }
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'UV Map'
	// type: 'ShaderNodeUVMap'
	// input sockets handling
	// output sockets definitions
	vec3 node0_out0_uv;
	
	node0_out0_uv = vec3(UV, 0.0);
	
	
	// node: 'Mapping'
	// type: 'ShaderNodeMapping'
	// input sockets handling
	vec3 node1_in0_vector = node0_out0_uv;
	// output sockets definitions
	vec3 node1_out0_vector;
	
	// Mapping type: POINT
	node_mapping(node1_in0_vector, mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0,
		0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), vec3(0.0, 0.0,
		0.0), vec3(1.0, 1.0, 1.0), 0.0, 0.0, node1_out0_vector);
	
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node2_in0_vector = node1_out0_vector;
	// output sockets definitions
	vec4 node2_out0_color;
	float node2_out1_alpha;
	
	node_tex_image(node2_in0_vector, texture_0, node2_out0_color, node2_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node3_in0_basecolor = node2_out0_color;
	float node3_in1_subsurface = float(0.0);
	vec3 node3_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node3_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node3_in4_metallic = float(0.0);
	float node3_in5_specular = float(0.5);
	float node3_in6_speculartint = float(0.0);
	float node3_in7_roughness = float(0.5);
	float node3_in8_anisotropic = float(0.0);
	float node3_in9_anisotropicrotation = float(0.0);
	float node3_in10_sheen = float(0.0);
	float node3_in11_sheentint = float(0.5);
	float node3_in12_clearcoat = float(0.0);
	float node3_in13_clearcoatroughness = float(0.029999999329447746);
	float node3_in14_ior = float(1.4500000476837158);
	float node3_in15_transmission = float(0.0);
	float node3_in16_transmissionroughness = float(0.0);
	vec4 node3_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node3_in18_alpha = float(1.0);
	vec3 node3_in19_normal = NORMAL;
	vec3 node3_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node3_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node3_bsdf_out0_albedo;
	float node3_bsdf_out1_sss_strength;
	float node3_bsdf_out3_specular;
	float node3_bsdf_out2_metallic;
	float node3_bsdf_out4_roughness;
	float node3_bsdf_out5_clearcoat;
	float node3_bsdf_out6_clearcoat_gloss;
	float node3_bsdf_out7_anisotropy;
	float node3_bsdf_out8_transmission;
	float node3_bsdf_out9_ior;
	
	node_bsdf_principled(node3_in0_basecolor, node3_in1_subsurface,
		node3_in3_subsurfacecolor, node3_in4_metallic, node3_in5_specular,
		node3_in7_roughness, node3_in12_clearcoat, node3_in13_clearcoatroughness,
		node3_in8_anisotropic, node3_in15_transmission, node3_in14_ior,
		node3_bsdf_out0_albedo, node3_bsdf_out1_sss_strength, node3_bsdf_out2_metallic,
		node3_bsdf_out3_specular, node3_bsdf_out4_roughness, node3_bsdf_out5_clearcoat,
		node3_bsdf_out6_clearcoat_gloss, node3_bsdf_out7_anisotropy,
		node3_bsdf_out8_transmission, node3_bsdf_out9_ior);
	
	
	ALBEDO = node3_bsdf_out0_albedo;
	SSS_STRENGTH = node3_bsdf_out1_sss_strength;
	SPECULAR = node3_bsdf_out3_specular;
	METALLIC = node3_bsdf_out2_metallic;
	ROUGHNESS = node3_bsdf_out4_roughness;
	CLEARCOAT = node3_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node3_bsdf_out6_clearcoat_gloss;
	NORMAL = node3_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node3_bsdf_out8_transmission;
	TANGENT = normalize(cross(cross(node3_in21_tangent, NORMAL), NORMAL));
	BINORMAL = cross(TANGENT, NORMAL);
	ANISOTROPY = node3_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=5]
resource_name = "Cube001"
blend_shape_mode = 0
blend_shape/names = PoolStringArray( "bounce", "open" )
blend_shape/mode = 0
surfaces/0 = {
"aabb": AABB( -2.98162, -3.03014, -1, 5.97434, 6.04164, 2 ),
"array_data": PoolByteArray( 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 126, 0, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 126, 0, 0, 127, 0, 0, 13, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 0, 127, 0, 0, 126, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 0, 127, 0, 0, 127, 0, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 129, 0, 0, 0, 0, 126, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 0, 129, 0, 0, 0, 0, 126, 0, 127, 0, 0, 13, 56, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 0, 0, 129, 0, 0, 0, 0, 126, 0, 127, 255, 59, 9, 56, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 129, 0, 0, 0, 0, 127, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 130, 0, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 130, 0, 0, 127, 0, 0, 13, 56, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 0, 0, 0, 129, 0, 0, 130, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 0, 129, 0, 0, 129, 0, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 130, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 129, 0, 0, 129, 0, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 129, 0, 0, 0, 0, 126, 0, 127, 0, 0, 255, 59, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 129, 0, 0, 0, 0, 127, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 126, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 127, 0, 0, 127, 0, 0, 127, 254, 59, 253, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 127, 0, 0, 0, 0, 130, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 0, 0, 127, 0, 0, 0, 0, 130, 0, 127, 0, 0, 13, 56, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 0, 0, 127, 0, 0, 0, 0, 130, 0, 127, 255, 59, 9, 56, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 127, 0, 0, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 127, 0, 0, 0, 0, 130, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 127, 0, 0, 0, 0, 129, 0, 127, 254, 59, 253, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 3, 0, 4, 0, 6, 0, 5, 0, 4, 0, 5, 0, 7, 0, 8, 0, 10, 0, 9, 0, 8, 0, 9, 0, 11, 0, 10, 0, 13, 0, 12, 0, 10, 0, 12, 0, 9, 0, 6, 0, 15, 0, 14, 0, 6, 0, 14, 0, 5, 0, 2, 0, 17, 0, 16, 0, 2, 0, 16, 0, 1, 0, 18, 0, 20, 0, 19, 0, 18, 0, 19, 0, 21, 0, 20, 0, 23, 0, 22, 0, 20, 0, 22, 0, 19, 0 ),
"blend_shape_data": [ PoolByteArray( 0, 0, 128, 63, 0, 0, 128, 63, 83, 233, 27, 191, 0, 113, 199, 0, 127, 0, 0, 127, 0, 60, 0, 0, 46, 86, 192, 191, 46, 86, 192, 63, 90, 45, 200, 62, 0, 97, 80, 0, 126, 0, 0, 127, 0, 0, 13, 56, 46, 86, 192, 63, 46, 86, 192, 63, 90, 45, 200, 62, 0, 97, 80, 0, 126, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 191, 0, 0, 128, 63, 83, 233, 27, 191, 0, 113, 199, 0, 127, 0, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 63, 83, 233, 27, 191, 143, 0, 199, 0, 0, 127, 0, 127, 0, 60, 0, 0, 46, 86, 192, 191, 46, 86, 192, 191, 90, 45, 200, 62, 159, 0, 80, 0, 0, 127, 0, 127, 0, 0, 13, 56, 46, 86, 192, 191, 46, 86, 192, 63, 90, 45, 200, 62, 159, 0, 80, 0, 0, 126, 0, 127, 255, 59, 9, 56, 0, 0, 128, 191, 0, 0, 128, 191, 83, 233, 27, 191, 143, 0, 199, 0, 0, 127, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 191, 83, 233, 27, 191, 0, 143, 199, 0, 129, 0, 0, 127, 0, 60, 0, 0, 46, 86, 192, 63, 46, 86, 192, 191, 90, 45, 200, 62, 0, 159, 80, 0, 130, 0, 0, 127, 0, 0, 13, 56, 46, 86, 192, 191, 46, 86, 192, 191, 90, 45, 200, 62, 0, 159, 80, 0, 130, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 63, 0, 0, 128, 191, 83, 233, 27, 191, 0, 143, 199, 0, 129, 0, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 159, 80, 0, 129, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 159, 80, 0, 129, 0, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 159, 0, 80, 0, 0, 126, 0, 127, 0, 0, 255, 59, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 159, 0, 80, 0, 0, 127, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 97, 80, 0, 127, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 97, 80, 0, 127, 0, 0, 127, 254, 59, 253, 59, 0, 0, 128, 63, 0, 0, 128, 191, 83, 233, 27, 191, 113, 0, 199, 0, 0, 129, 0, 127, 0, 60, 0, 0, 46, 86, 192, 63, 46, 86, 192, 63, 90, 45, 200, 62, 97, 0, 80, 0, 0, 129, 0, 127, 0, 0, 13, 56, 46, 86, 192, 63, 46, 86, 192, 191, 90, 45, 200, 62, 97, 0, 80, 0, 0, 130, 0, 127, 255, 59, 9, 56, 0, 0, 128, 63, 0, 0, 128, 63, 83, 233, 27, 191, 113, 0, 199, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 97, 0, 80, 0, 0, 130, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 97, 0, 80, 0, 0, 129, 0, 127, 254, 59, 253, 59 ), PoolByteArray( 0, 0, 128, 63, 65, 188, 64, 64, 72, 137, 121, 63, 0, 0, 127, 0, 127, 0, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 65, 188, 0, 64, 72, 137, 121, 63, 0, 0, 127, 0, 126, 0, 0, 127, 0, 0, 13, 56, 0, 0, 128, 63, 65, 188, 0, 64, 72, 137, 121, 63, 0, 0, 127, 0, 126, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 191, 65, 188, 64, 64, 72, 137, 121, 63, 0, 0, 127, 0, 127, 0, 0, 127, 46, 11, 131, 5, 221, 210, 62, 192, 0, 0, 128, 63, 219, 78, 123, 63, 0, 0, 127, 0, 0, 127, 0, 127, 0, 60, 0, 0, 185, 165, 253, 191, 0, 0, 128, 191, 219, 78, 123, 63, 0, 0, 127, 0, 0, 126, 0, 127, 0, 0, 13, 56, 185, 165, 253, 191, 0, 0, 128, 63, 219, 78, 123, 63, 0, 0, 127, 0, 0, 126, 0, 127, 255, 59, 9, 56, 221, 210, 62, 192, 0, 0, 128, 191, 219, 78, 123, 63, 0, 0, 127, 0, 0, 127, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 208, 237, 65, 192, 35, 163, 119, 63, 0, 0, 127, 0, 129, 0, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 208, 237, 1, 192, 35, 163, 119, 63, 0, 0, 127, 0, 130, 0, 0, 127, 0, 0, 13, 56, 0, 0, 128, 191, 208, 237, 1, 192, 35, 163, 119, 63, 0, 0, 127, 0, 130, 0, 0, 127, 255, 59, 9, 56, 0, 0, 128, 63, 208, 237, 65, 192, 35, 163, 119, 63, 0, 0, 127, 0, 129, 0, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 161, 219, 131, 191, 35, 163, 119, 63, 0, 0, 127, 0, 130, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 191, 161, 219, 131, 191, 35, 163, 119, 63, 0, 0, 127, 0, 129, 0, 0, 127, 254, 59, 253, 59, 31, 75, 123, 191, 0, 0, 128, 191, 219, 78, 123, 63, 0, 0, 127, 0, 0, 126, 0, 127, 0, 0, 255, 59, 31, 75, 123, 191, 0, 0, 128, 63, 219, 78, 123, 63, 0, 0, 127, 0, 0, 127, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 129, 120, 129, 63, 72, 137, 121, 63, 0, 0, 127, 0, 126, 0, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 129, 120, 129, 63, 72, 137, 121, 63, 0, 0, 127, 0, 127, 0, 0, 127, 254, 59, 253, 59, 185, 136, 63, 64, 0, 0, 128, 191, 150, 37, 126, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 60, 0, 0, 199, 17, 255, 63, 0, 0, 128, 63, 150, 37, 126, 63, 0, 0, 127, 0, 0, 130, 0, 127, 0, 0, 13, 56, 199, 17, 255, 63, 0, 0, 128, 191, 150, 37, 126, 63, 0, 0, 127, 0, 0, 130, 0, 127, 255, 59, 9, 56, 185, 136, 63, 64, 0, 0, 128, 63, 150, 37, 126, 63, 0, 0, 127, 0, 0, 129, 0, 127, 46, 11, 131, 5, 58, 35, 126, 63, 0, 0, 128, 63, 150, 37, 126, 63, 0, 0, 127, 0, 0, 130, 0, 127, 0, 0, 255, 59, 58, 35, 126, 63, 0, 0, 128, 191, 150, 37, 126, 63, 0, 0, 127, 0, 0, 129, 0, 127, 254, 59, 253, 59 ) ],
"format": 97559,
"index_count": 48,
"material": SubResource( 2 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 24
}
surfaces/1 = {
"aabb": AABB( -1, -1, -1, 2, 2.00001, 2 ),
"array_data": PoolByteArray( 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 129, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 129, 0, 0, 129, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 0, 255, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 3, 0, 4, 0, 6, 0, 5, 0, 4, 0, 5, 0, 7, 0 ),
"blend_shape_data": [ PoolByteArray( 0, 0, 128, 191, 0, 0, 128, 63, 83, 233, 27, 191, 0, 0, 129, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 191, 83, 233, 27, 191, 0, 0, 129, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 191, 83, 233, 27, 191, 0, 0, 129, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 83, 233, 27, 191, 0, 0, 129, 0, 0, 129, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 0, 255, 59 ), PoolByteArray( 0, 0, 128, 191, 0, 0, 128, 63, 231, 142, 126, 63, 0, 0, 129, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 63, 0, 0, 128, 191, 231, 142, 126, 63, 0, 0, 129, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 191, 0, 0, 128, 191, 231, 142, 126, 63, 0, 0, 129, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 63, 0, 0, 128, 63, 231, 142, 126, 63, 0, 0, 129, 0, 0, 129, 0, 127, 0, 0, 255, 59, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 46, 11, 131, 5, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 254, 59, 253, 59, 0, 0, 128, 63, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 60, 0, 0, 0, 0, 128, 191, 0, 0, 128, 63, 0, 0, 128, 63, 0, 0, 127, 0, 0, 129, 0, 127, 0, 0, 255, 59 ) ],
"format": 97559,
"index_count": 12,
"material": SubResource( 4 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 8
}

[sub_resource type="Animation" id=6]
resource_name = "Idle"

[sub_resource type="Animation" id=7]
resource_name = "open"
tracks/0/type = "value"
tracks/0/path = NodePath(".:blend_shapes/open")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}

[sub_resource type="BoxShape" id=8]
extents = Vector3( 0.5, 0.5, 0.5 )

[sub_resource type="Gradient" id=9]
offsets = PoolRealArray( 0.42963, 0.97037 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=10]
gradient = SubResource( 9 )
width = 128

[sub_resource type="ParticlesMaterial" id=11]
spread = 169.2
flatness = 0.51
gravity = Vector3( 0, 3, 0 )
initial_velocity = 12.0
color_ramp = SubResource( 10 )
anim_speed = 1.0
anim_speed_random = 1.0

[sub_resource type="SpatialMaterial" id=12]
flags_transparent = true
vertex_color_use_as_albedo = true
params_billboard_mode = 3
params_billboard_keep_scale = true
particles_anim_h_frames = 1
particles_anim_v_frames = 3
particles_anim_loop = false
albedo_color = Color( 0.670588, 0.411765, 0.0431373, 1 )
albedo_texture = ExtResource( 2 )
metallic_specular = 0.0
emission_enabled = true
emission = Color( 0.266667, 0.0901961, 0, 1 )
emission_energy = 1.0
emission_operator = 0
emission_on_uv2 = false
uv1_scale = Vector3( 2, 1, 1 )

[sub_resource type="QuadMesh" id=13]
material = SubResource( 12 )

[node name="obj_crate_checkpoint" type="RigidBody" groups=[
"checkpoint",
"crate",
]]
collision_layer = 512
collision_mask = 530
mode = 3
script = ExtResource( 5 )
ID = 2
startGravity = false

[node name="model" type="MeshInstance" parent="."]
transform = Transform( 0.5, 0, 0, 0, -6.71795e-08, -0.5, 0, 0.5, -6.71795e-08, 0, 0.5, 6.71795e-08 )
mesh = SubResource( 5 )
blend_shapes/bounce = 0.0
blend_shapes/open = 0.0
material/0 = ExtResource( 7 )
material/1 = ExtResource( 6 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="model"]
autoplay = "Idle"
anims/Idle = SubResource( 6 )
anims/open = SubResource( 7 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0 )
shape = SubResource( 8 )

[node name="Particle" type="Particles" parent="."]
emitting = false
amount = 12
lifetime = 0.3
one_shot = true
explosiveness = 1.0
process_material = SubResource( 11 )
draw_pass_1 = SubResource( 13 )

[node name="sfx" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 4 )

[node name="Area" parent="." instance=ExtResource( 8 )]
